{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport Cookies from 'js-cookie';\nimport Axios from 'axios';\nimport Router from 'next/router';\nimport jwt from 'jwt-simple';\nvar Fetch = Axios.create({\n  baseURL: 'http://localhost:3333'\n});\nexport default {\n  isAuthenticated: function () {\n    var _isAuthenticated = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(setLoading, isLoginPage) {\n      var token, SECRET, decodedToken, response, _isAuthenticated2;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              token = Cookies.get('DICAST_AUTH_TOKEN');\n\n              if (!(token === undefined || token === null || token === '')) {\n                _context.next = 5;\n                break;\n              }\n\n              isLoginPage ? setLoading(false) : Router.push('/login');\n              _context.next = 19;\n              break;\n\n            case 5:\n              _context.prev = 5;\n              SECRET = '26sys323nosi188xzSXa98ZAA';\n              decodedToken = jwt.decode(token, SECRET, true);\n              console.log({\n                decodedToken: decodedToken\n              });\n              _context.next = 11;\n              return Axios.get('http://localhost:3333/is_authenticated', {\n                headers: {\n                  decodedToken: decodedToken\n                }\n              });\n\n            case 11:\n              response = _context.sent;\n              _isAuthenticated2 = response.data.isAuthenticated;\n\n              if (!_isAuthenticated2) {\n                if (!isLoginPage) {\n                  Router.push('/login');\n                } else {\n                  setLoading(false);\n                }\n              } else {\n                if (isLoginPage) {\n                  Router.push('/');\n                } else {\n                  setLoading(false);\n                }\n              }\n\n              _context.next = 19;\n              break;\n\n            case 16:\n              _context.prev = 16;\n              _context.t0 = _context[\"catch\"](5);\n              Router.push('/login');\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[5, 16]]);\n    }));\n\n    function isAuthenticated(_x, _x2) {\n      return _isAuthenticated.apply(this, arguments);\n    }\n\n    return isAuthenticated;\n  }(),\n  authenticate: function () {\n    var _authenticate = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(username, password, _setUser, setLoginError, persistLogged) {\n      var _ref, data, user, auth, error, payload, SECRET, token;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return Fetch.post('/authenticate', {\n                username: username,\n                password: password\n              });\n\n            case 2:\n              _ref = _context2.sent;\n              data = _ref.data;\n              user = data.user, auth = data.auth, error = data.error;\n              payload = {\n                auth: auth\n              };\n              console.log(payload);\n              SECRET = '26sys323nosi188xzSXa98ZAA';\n              token = jwt.encode(auth, SECRET);\n\n              if (error) {\n                _context2.next = 15;\n                break;\n              }\n\n              _context2.next = 12;\n              return _setUser(user);\n\n            case 12:\n              if (persistLogged) {\n                Cookies.set('DICAST_AUTH_TOKEN', token, {\n                  expires: 50000\n                });\n                Cookies.set('USERNAME', user.username, {\n                  expires: 50000\n                }); //TODO colocar o resto das infos nos cookies\n              } else {\n                Cookies.set('DICAST_AUTH_TOKEN', token);\n                Cookies.set('USERNAME', user.username); //TODO colocar o resto das infos nos cookies\n              } // Router.push('/');\n\n\n              _context2.next = 24;\n              break;\n\n            case 15:\n              _context2.t0 = error;\n              _context2.next = _context2.t0 === 'user not found' ? 18 : _context2.t0 === 'invalid password' ? 20 : 22;\n              break;\n\n            case 18:\n              setLoginError(1);\n              return _context2.abrupt(\"break\", 24);\n\n            case 20:\n              setLoginError(2);\n              return _context2.abrupt(\"break\", 24);\n\n            case 22:\n              setLoginError(1);\n              return _context2.abrupt(\"break\", 24);\n\n            case 24:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function authenticate(_x3, _x4, _x5, _x6, _x7) {\n      return _authenticate.apply(this, arguments);\n    }\n\n    return authenticate;\n  }(),\n  getUser: function () {\n    var _getUser = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3(userId, setUser) {\n      var _ref2, data, user;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return Fetch.get(\"/users?user_id=\".concat(userId));\n\n            case 2:\n              _ref2 = _context3.sent;\n              data = _ref2.data;\n              user = data.user;\n              setUser(user);\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    function getUser(_x8, _x9) {\n      return _getUser.apply(this, arguments);\n    }\n\n    return getUser;\n  }()\n};","map":{"version":3,"sources":["C:/Users/marce/Programação/Projetos/dicast/frontend/services/Api.js"],"names":["Cookies","Axios","Router","jwt","Fetch","create","baseURL","isAuthenticated","setLoading","isLoginPage","token","get","undefined","push","SECRET","decodedToken","decode","console","log","headers","response","data","authenticate","username","password","_setUser","setLoginError","persistLogged","post","user","auth","error","payload","encode","set","expires","getUser","userId","setUser"],"mappings":";;AAAA,OAAOA,OAAP,MAAoB,WAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AAEA,IAAMC,KAAK,GAAGH,KAAK,CAACI,MAAN,CAAa;AAAEC,EAAAA,OAAO,EAAE;AAAX,CAAb,CAAd;AAEA,eAAe;AACLC,EAAAA,eADK;AAAA;AAAA;AAAA,8CACWC,UADX,EACuBC,WADvB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAGDC,cAAAA,KAHC,GAGOV,OAAO,CAACW,GAAR,CAAY,mBAAZ,CAHP;;AAAA,oBAKHD,KAAK,KAAKE,SAAV,IAAuBF,KAAK,KAAK,IAAjC,IAAyCA,KAAK,KAAK,EALhD;AAAA;AAAA;AAAA;;AAMHD,cAAAA,WAAW,GAAGD,UAAU,CAAC,KAAD,CAAb,GAAuBN,MAAM,CAACW,IAAP,CAAY,QAAZ,CAAlC;AANG;AAAA;;AAAA;AAAA;AAWOC,cAAAA,MAXP,GAWgB,2BAXhB;AAYOC,cAAAA,YAZP,GAYsBZ,GAAG,CAACa,MAAJ,CAAWN,KAAX,EAAkBI,MAAlB,EAA0B,IAA1B,CAZtB;AAcCG,cAAAA,OAAO,CAACC,GAAR,CAAY;AAAEH,gBAAAA,YAAY,EAAZA;AAAF,eAAZ;AAdD;AAAA,qBAgBwBd,KAAK,CAACU,GAAN,CAAU,wCAAV,EAAoD;AACvEQ,gBAAAA,OAAO,EAAE;AAAEJ,kBAAAA,YAAY,EAAZA;AAAF;AAD8D,eAApD,CAhBxB;;AAAA;AAgBOK,cAAAA,QAhBP;AAoBSb,cAAAA,iBApBT,GAoB6Ba,QAAQ,CAACC,IApBtC,CAoBSd,eApBT;;AAsBC,kBAAI,CAACA,iBAAL,EAAsB;AAClB,oBAAI,CAACE,WAAL,EAAkB;AACdP,kBAAAA,MAAM,CAACW,IAAP,CAAY,QAAZ;AACH,iBAFD,MAGK;AACDL,kBAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACJ,eAPD,MAQK;AACD,oBAAIC,WAAJ,EAAiB;AACbP,kBAAAA,MAAM,CAACW,IAAP,CAAY,GAAZ;AACH,iBAFD,MAGK;AACDL,kBAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACJ;;AArCF;AAAA;;AAAA;AAAA;AAAA;AAuCCN,cAAAA,MAAM,CAACW,IAAP,CAAY,QAAZ;;AAvCD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA4CLS,EAAAA,YA5CK;AAAA;AAAA;AAAA,+CA4CQC,QA5CR,EA4CkBC,QA5ClB,EA4C4BC,QA5C5B,EA4CsCC,aA5CtC,EA4CqDC,aA5CrD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBA6CgBvB,KAAK,CAACwB,IAAN,CAAW,eAAX,EAA4B;AAAEL,gBAAAA,QAAQ,EAARA,QAAF;AAAYC,gBAAAA,QAAQ,EAARA;AAAZ,eAA5B,CA7ChB;;AAAA;AAAA;AA6CCH,cAAAA,IA7CD,QA6CCA,IA7CD;AA+CCQ,cAAAA,IA/CD,GA+CuBR,IA/CvB,CA+CCQ,IA/CD,EA+COC,IA/CP,GA+CuBT,IA/CvB,CA+COS,IA/CP,EA+CaC,KA/Cb,GA+CuBV,IA/CvB,CA+CaU,KA/Cb;AAiDDC,cAAAA,OAjDC,GAiDS;AAAEF,gBAAAA,IAAI,EAAJA;AAAF,eAjDT;AAmDPb,cAAAA,OAAO,CAACC,GAAR,CAAYc,OAAZ;AAEMlB,cAAAA,MArDC,GAqDQ,2BArDR;AAsDDJ,cAAAA,KAtDC,GAsDOP,GAAG,CAAC8B,MAAJ,CAAWH,IAAX,EAAiBhB,MAAjB,CAtDP;;AAAA,kBAwDFiB,KAxDE;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAyDGN,QAAQ,CAACI,IAAD,CAzDX;;AAAA;AA2DH,kBAAIF,aAAJ,EAAmB;AACf3B,gBAAAA,OAAO,CAACkC,GAAR,CAAY,mBAAZ,EAAiCxB,KAAjC,EAAwC;AAAEyB,kBAAAA,OAAO,EAAE;AAAX,iBAAxC;AACAnC,gBAAAA,OAAO,CAACkC,GAAR,CAAY,UAAZ,EAAwBL,IAAI,CAACN,QAA7B,EAAuC;AAAEY,kBAAAA,OAAO,EAAE;AAAX,iBAAvC,EAFe,CAGf;AACH,eAJD,MAKK;AACDnC,gBAAAA,OAAO,CAACkC,GAAR,CAAY,mBAAZ,EAAiCxB,KAAjC;AACAV,gBAAAA,OAAO,CAACkC,GAAR,CAAY,UAAZ,EAAwBL,IAAI,CAACN,QAA7B,EAFC,CAGD;AACH,eApEE,CAsEH;;;AAtEG;AAAA;;AAAA;AAAA,6BAyEKQ,KAzEL;AAAA,gDA0EM,gBA1EN,yBA4EM,kBA5EN;AAAA;;AAAA;AA0EwBL,cAAAA,aAAa,CAAC,CAAD,CAAb;AA1ExB;;AAAA;AA4E0BA,cAAAA,aAAa,CAAC,CAAD,CAAb;AA5E1B;;AAAA;AA8EUA,cAAAA,aAAa,CAAC,CAAD,CAAb;AA9EV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAoFLU,EAAAA,OApFK;AAAA;AAAA;AAAA,+CAoFGC,MApFH,EAoFWC,OApFX;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAqFgBlC,KAAK,CAACO,GAAN,0BAA4B0B,MAA5B,EArFhB;;AAAA;AAAA;AAqFChB,cAAAA,IArFD,SAqFCA,IArFD;AAuFCQ,cAAAA,IAvFD,GAuFUR,IAvFV,CAuFCQ,IAvFD;AAyFPS,cAAAA,OAAO,CAACT,IAAD,CAAP;;AAzFO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAf","sourcesContent":["import Cookies from 'js-cookie';\r\nimport Axios from 'axios';\r\nimport Router from 'next/router'\r\nimport jwt from 'jwt-simple';\r\n\r\nconst Fetch = Axios.create({ baseURL: 'http://localhost:3333' });\r\n\r\nexport default {\r\n    async isAuthenticated(setLoading, isLoginPage) {\r\n\r\n        const token = Cookies.get('DICAST_AUTH_TOKEN');\r\n\r\n        if (token === undefined || token === null || token === '') {\r\n            isLoginPage ? setLoading(false) : Router.push('/login');\r\n        }\r\n        else {\r\n            try {\r\n\r\n                const SECRET = '26sys323nosi188xzSXa98ZAA';\r\n                const decodedToken = jwt.decode(token, SECRET, true);\r\n\r\n                console.log({ decodedToken });\r\n\r\n                const response = await Axios.get('http://localhost:3333/is_authenticated', {\r\n                    headers: { decodedToken }\r\n                });\r\n\r\n                const { isAuthenticated } = response.data;\r\n\r\n                if (!isAuthenticated) {\r\n                    if (!isLoginPage) {\r\n                        Router.push('/login');\r\n                    }\r\n                    else {\r\n                        setLoading(false);\r\n                    }\r\n                }\r\n                else {\r\n                    if (isLoginPage) {\r\n                        Router.push('/');\r\n                    }\r\n                    else {\r\n                        setLoading(false);\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                Router.push('/login');\r\n            }\r\n        }\r\n    },\r\n\r\n    async authenticate(username, password, _setUser, setLoginError, persistLogged) {\r\n        const { data } = await Fetch.post('/authenticate', { username, password });\r\n\r\n        const { user, auth, error } = data;\r\n\r\n        const payload = { auth };\r\n\r\n        console.log(payload);\r\n\r\n        const SECRET = '26sys323nosi188xzSXa98ZAA';\r\n        const token = jwt.encode(auth, SECRET);\r\n\r\n        if (!error) {\r\n            await _setUser(user);\r\n\r\n            if (persistLogged) {\r\n                Cookies.set('DICAST_AUTH_TOKEN', token, { expires: 50000 });\r\n                Cookies.set('USERNAME', user.username, { expires: 50000 });\r\n                //TODO colocar o resto das infos nos cookies\r\n            }\r\n            else {\r\n                Cookies.set('DICAST_AUTH_TOKEN', token);\r\n                Cookies.set('USERNAME', user.username);\r\n                //TODO colocar o resto das infos nos cookies\r\n            }\r\n\r\n            // Router.push('/');\r\n        }\r\n        else {\r\n            switch (error) {\r\n                case 'user not found': setLoginError(1);\r\n                    break;\r\n                case 'invalid password': setLoginError(2);\r\n                    break;\r\n                default: setLoginError(1);\r\n                    break;\r\n            }\r\n        }\r\n    },\r\n\r\n    async getUser(userId, setUser) {\r\n        const { data } = await Fetch.get(`/users?user_id=${userId}`);\r\n\r\n        const { user } = data;\r\n\r\n        setUser(user);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}