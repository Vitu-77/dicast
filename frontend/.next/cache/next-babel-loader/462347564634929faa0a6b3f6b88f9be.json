{"ast":null,"code":"import Cookies from 'js-cookie';\nimport Axios from 'axios';\nimport Router from 'next/router';\nconst Fetch = Axios.create({\n  baseURL: 'http://localhost:3333'\n});\nexport default {\n  async isAuthenticated(setLoading) {\n    console.log();\n    const token = Cookies.get('DICAST_AUTH_TOKEN');\n\n    if (token === undefined || token === null || token === '') {\n      Router.push('/login');\n      return false;\n    } else {\n      try {\n        const response = await Axios.get('http://localhost:3333/is_authenticated', {\n          headers: {\n            token\n          }\n        });\n        const {\n          isAuthenticated\n        } = response.data;\n\n        if (!isAuthenticated) {\n          Router.push('/login');\n          return false;\n        } else {\n          return true;\n        }\n      } catch (error) {\n        Router.push('/login');\n        return false;\n      }\n    }\n  },\n\n  async authenticate(username, password, _setUser) {\n    const {\n      data\n    } = await Fetch.post('/authenticate', {\n      username,\n      password\n    });\n    const {\n      user,\n      auth\n    } = data;\n\n    _setUser(user);\n\n    Cookies.set('DICAST_AUTH_TOKEN', auth);\n    Cookies.set('USERNAME', user.username); //TODO Cookies.set('ACESS_LEVEL', user.acess_level);\n  },\n\n  async getUser(userId, setUser) {\n    const {\n      data\n    } = await Fetch.get(`/users?user_id=${userId}`);\n    const {\n      user\n    } = data;\n    setUser(user);\n  }\n\n};","map":{"version":3,"sources":["C:/Users/marce/Programação/Projetos/dicast/frontend/services/Api.js"],"names":["Cookies","Axios","Router","Fetch","create","baseURL","isAuthenticated","setLoading","console","log","token","get","undefined","push","response","headers","data","error","authenticate","username","password","_setUser","post","user","auth","set","getUser","userId","setUser"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,MAAMC,KAAK,GAAGF,KAAK,CAACG,MAAN,CAAa;AAAEC,EAAAA,OAAO,EAAE;AAAX,CAAb,CAAd;AAEA,eAAe;AACX,QAAMC,eAAN,CAAsBC,UAAtB,EAAkC;AAE9BC,IAAAA,OAAO,CAACC,GAAR;AAEA,UAAMC,KAAK,GAAGV,OAAO,CAACW,GAAR,CAAY,mBAAZ,CAAd;;AAEA,QAAID,KAAK,KAAKE,SAAV,IAAuBF,KAAK,KAAK,IAAjC,IAAyCA,KAAK,KAAK,EAAvD,EAA2D;AACvDR,MAAAA,MAAM,CAACW,IAAP,CAAY,QAAZ;AACA,aAAO,KAAP;AACH,KAHD,MAIK;AACD,UAAI;AACA,cAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACU,GAAN,CAAU,wCAAV,EAAoD;AACvEI,UAAAA,OAAO,EAAE;AAAEL,YAAAA;AAAF;AAD8D,SAApD,CAAvB;AAIA,cAAM;AAAEJ,UAAAA;AAAF,YAAsBQ,QAAQ,CAACE,IAArC;;AAEA,YAAI,CAACV,eAAL,EAAsB;AAClBJ,UAAAA,MAAM,CAACW,IAAP,CAAY,QAAZ;AACA,iBAAO,KAAP;AACH,SAHD,MAIK;AACD,iBAAO,IAAP;AACH;AACJ,OAdD,CAcE,OAAOI,KAAP,EAAc;AACZf,QAAAA,MAAM,CAACW,IAAP,CAAY,QAAZ;AACA,eAAO,KAAP;AACH;AACJ;AACJ,GA/BU;;AAiCX,QAAMK,YAAN,CAAmBC,QAAnB,EAA6BC,QAA7B,EAAuCC,QAAvC,EAAiD;AAC7C,UAAM;AAAEL,MAAAA;AAAF,QAAW,MAAMb,KAAK,CAACmB,IAAN,CAAW,eAAX,EAA4B;AAAEH,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAA5B,CAAvB;AAEA,UAAM;AAAEG,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAiBR,IAAvB;;AAEAK,IAAAA,QAAQ,CAACE,IAAD,CAAR;;AACAvB,IAAAA,OAAO,CAACyB,GAAR,CAAY,mBAAZ,EAAiCD,IAAjC;AACAxB,IAAAA,OAAO,CAACyB,GAAR,CAAY,UAAZ,EAAwBF,IAAI,CAACJ,QAA7B,EAP6C,CAQ7C;AACH,GA1CU;;AA4CX,QAAMO,OAAN,CAAcC,MAAd,EAAsBC,OAAtB,EAA+B;AAC3B,UAAM;AAAEZ,MAAAA;AAAF,QAAW,MAAMb,KAAK,CAACQ,GAAN,CAAW,kBAAiBgB,MAAO,EAAnC,CAAvB;AAEA,UAAM;AAAEJ,MAAAA;AAAF,QAAWP,IAAjB;AAEAY,IAAAA,OAAO,CAACL,IAAD,CAAP;AACH;;AAlDU,CAAf","sourcesContent":["import Cookies from 'js-cookie';\r\nimport Axios from 'axios';\r\nimport Router from 'next/router'\r\n\r\nconst Fetch = Axios.create({ baseURL: 'http://localhost:3333' });\r\n\r\nexport default {\r\n    async isAuthenticated(setLoading) {\r\n\r\n        console.log();\r\n\r\n        const token = Cookies.get('DICAST_AUTH_TOKEN');\r\n\r\n        if (token === undefined || token === null || token === '') {\r\n            Router.push('/login');\r\n            return false;\r\n        }\r\n        else {\r\n            try {\r\n                const response = await Axios.get('http://localhost:3333/is_authenticated', {\r\n                    headers: { token }\r\n                });\r\n\r\n                const { isAuthenticated } = response.data;\r\n\r\n                if (!isAuthenticated) {\r\n                    Router.push('/login');\r\n                    return false;\r\n                }\r\n                else {\r\n                    return true;\r\n                }\r\n            } catch (error) {\r\n                Router.push('/login');\r\n                return false;\r\n            }\r\n        }\r\n    },\r\n\r\n    async authenticate(username, password, _setUser) {\r\n        const { data } = await Fetch.post('/authenticate', { username, password });\r\n\r\n        const { user, auth } = data;\r\n\r\n        _setUser(user);\r\n        Cookies.set('DICAST_AUTH_TOKEN', auth);\r\n        Cookies.set('USERNAME', user.username);\r\n        //TODO Cookies.set('ACESS_LEVEL', user.acess_level);\r\n    },\r\n\r\n    async getUser(userId, setUser) {\r\n        const { data } = await Fetch.get(`/users?user_id=${userId}`);\r\n\r\n        const { user } = data;\r\n\r\n        setUser(user);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}