{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport Cookies from 'js-cookie';\nimport Axios from 'axios';\nimport Router from 'next/router';\nimport jwt from 'jwt-simple';\nimport dotenv from 'dotenv-safe';\ndotenv.config();\nvar Fetch = Axios.create({\n  baseURL: 'http://localhost:3333'\n});\nexport default {\n  isAuthenticated: function () {\n    var _isAuthenticated = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(setLoading, isLoginPage) {\n      var token, response, _isAuthenticated2;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              token = Cookies.get('DICAST_AUTH_TOKEN');\n\n              if (!(token === undefined || token === null || token === '')) {\n                _context.next = 5;\n                break;\n              }\n\n              isLoginPage ? setLoading(false) : Router.push('/login');\n              _context.next = 16;\n              break;\n\n            case 5:\n              _context.prev = 5;\n              _context.next = 8;\n              return Axios.get('http://localhost:3333/is_authenticated', {\n                headers: {\n                  token: token\n                }\n              });\n\n            case 8:\n              response = _context.sent;\n              _isAuthenticated2 = response.data.isAuthenticated;\n\n              if (!_isAuthenticated2) {\n                if (!isLoginPage) {\n                  Router.push('/login');\n                } else {\n                  setLoading(false);\n                }\n              } else {\n                if (isLoginPage) {\n                  Router.push('/');\n                } else {\n                  setLoading(false);\n                }\n              }\n\n              _context.next = 16;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](5);\n              Router.push('/login');\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[5, 13]]);\n    }));\n\n    function isAuthenticated(_x, _x2) {\n      return _isAuthenticated.apply(this, arguments);\n    }\n\n    return isAuthenticated;\n  }(),\n  authenticate: function () {\n    var _authenticate = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(username, password, _setUser, setLoginError, persistLogged) {\n      var _ref, data, user, auth, error, SECRET, token;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return Fetch.post('/authenticate', {\n                username: username,\n                password: password\n              });\n\n            case 2:\n              _ref = _context2.sent;\n              data = _ref.data;\n              user = data.user, auth = data.auth, error = data.error;\n              SECRET = '26sys323nosi188xzSXa98ZAA';\n              console.log({\n                auth: auth\n              });\n              token = jwt.encode(auth, SECRET);\n              console.log({\n                token: token\n              });\n\n              if (error) {\n                _context2.next = 15;\n                break;\n              }\n\n              _context2.next = 12;\n              return _setUser(user);\n\n            case 12:\n              if (persistLogged) {\n                Cookies.set('DICAST_AUTH_TOKEN', auth, {\n                  expires: 50000\n                });\n                Cookies.set('USERNAME', user.username, {\n                  expires: 50000\n                }); //TODO colocar o resto das infos nos cookies\n              } else {\n                Cookies.set('DICAST_AUTH_TOKEN', auth);\n                Cookies.set('USERNAME', user.username); //TODO colocar o resto das infos nos cookies\n              } // Router.push('/');\n\n\n              _context2.next = 24;\n              break;\n\n            case 15:\n              _context2.t0 = error;\n              _context2.next = _context2.t0 === 'user not found' ? 18 : _context2.t0 === 'invalid password' ? 20 : 22;\n              break;\n\n            case 18:\n              setLoginError(1);\n              return _context2.abrupt(\"break\", 24);\n\n            case 20:\n              setLoginError(2);\n              return _context2.abrupt(\"break\", 24);\n\n            case 22:\n              setLoginError(1);\n              return _context2.abrupt(\"break\", 24);\n\n            case 24:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function authenticate(_x3, _x4, _x5, _x6, _x7) {\n      return _authenticate.apply(this, arguments);\n    }\n\n    return authenticate;\n  }(),\n  getUser: function () {\n    var _getUser = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3(userId, setUser) {\n      var _ref2, data, user;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return Fetch.get(\"/users?user_id=\".concat(userId));\n\n            case 2:\n              _ref2 = _context3.sent;\n              data = _ref2.data;\n              user = data.user;\n              setUser(user);\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    function getUser(_x8, _x9) {\n      return _getUser.apply(this, arguments);\n    }\n\n    return getUser;\n  }()\n};","map":{"version":3,"sources":["C:/Users/marce/Programação/Projetos/dicast/frontend/services/Api.js"],"names":["Cookies","Axios","Router","jwt","dotenv","config","Fetch","create","baseURL","isAuthenticated","setLoading","isLoginPage","token","get","undefined","push","headers","response","data","authenticate","username","password","_setUser","setLoginError","persistLogged","post","user","auth","error","SECRET","console","log","encode","set","expires","getUser","userId","setUser"],"mappings":"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","sourcesContent":["import Cookies from 'js-cookie';\r\nimport Axios from 'axios';\r\nimport Router from 'next/router'\r\nimport jwt from 'jwt-simple';\r\n\r\nimport dotenv from 'dotenv-safe';\r\n\r\ndotenv.config( );\r\n\r\nconst Fetch = Axios.create({ baseURL: 'http://localhost:3333' });\r\n\r\nexport default {\r\n    async isAuthenticated(setLoading, isLoginPage) {\r\n\r\n        const token = Cookies.get('DICAST_AUTH_TOKEN');\r\n\r\n        if (token === undefined || token === null || token === '') {\r\n            isLoginPage ? setLoading(false) : Router.push('/login');\r\n        }\r\n        else {\r\n            try {\r\n                const response = await Axios.get('http://localhost:3333/is_authenticated', {\r\n                    headers: { token }\r\n                });\r\n\r\n                const { isAuthenticated } = response.data;\r\n\r\n                if (!isAuthenticated) {\r\n                    if (!isLoginPage) {\r\n                        Router.push('/login');\r\n                    }\r\n                    else {\r\n                        setLoading(false);\r\n                    }\r\n                }\r\n                else {\r\n                    if (isLoginPage) {\r\n                        Router.push('/');\r\n                    }\r\n                    else {\r\n                        setLoading(false);\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                Router.push('/login');\r\n            }\r\n        }\r\n    },\r\n\r\n    async authenticate(username, password, _setUser, setLoginError, persistLogged) {\r\n        const { data } = await Fetch.post('/authenticate', { username, password });\r\n\r\n        const { user, auth, error } = data;\r\n        const SECRET = '26sys323nosi188xzSXa98ZAA';\r\n\r\n        console.log({ auth });\r\n\r\n        const token = jwt.encode(auth, SECRET);\r\n\r\n        console.log({ token });\r\n\r\n        if (!error) {\r\n            await _setUser(user);\r\n\r\n            if (persistLogged) {\r\n                Cookies.set('DICAST_AUTH_TOKEN', auth, { expires: 50000 });\r\n                Cookies.set('USERNAME', user.username, { expires: 50000 });\r\n                //TODO colocar o resto das infos nos cookies\r\n            }\r\n            else {\r\n                Cookies.set('DICAST_AUTH_TOKEN', auth);\r\n                Cookies.set('USERNAME', user.username);\r\n                //TODO colocar o resto das infos nos cookies\r\n            }\r\n\r\n            // Router.push('/');\r\n        }\r\n        else {\r\n            switch (error) {\r\n                case 'user not found': setLoginError(1);\r\n                    break;\r\n                case 'invalid password': setLoginError(2);\r\n                    break;\r\n                default: setLoginError(1);\r\n                    break;\r\n            }\r\n        }\r\n    },\r\n\r\n    async getUser(userId, setUser) {\r\n        const { data } = await Fetch.get(`/users?user_id=${userId}`);\r\n\r\n        const { user } = data;\r\n\r\n        setUser(user);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}