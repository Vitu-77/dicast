{"ast":null,"code":"import Cookies from 'js-cookie';\nimport Axios from 'axios';\nimport Router from 'next/router';\nimport jwt from 'jwt-simple';\nconst Fetch = Axios.create({\n  baseURL: 'http://localhost:3333'\n});\nexport default {\n  async isAuthenticated(setLoading, isLoginPage) {\n    const token = Cookies.get('DICAST_AUTH_TOKEN');\n\n    if (token === undefined || token === null || token === '') {\n      isLoginPage ? setLoading(false) : Router.push('/login');\n    } else {\n      try {\n        const secretKey = '26sys323nosi188xzSXa98ZAA';\n        const {\n          auth\n        } = jwt.decode(token, secretKey);\n        const response = await Axios.get('http://localhost:3333/is_authenticated', {\n          headers: {\n            auth\n          }\n        });\n        const {\n          isAuthenticated\n        } = response.data;\n\n        if (!isAuthenticated) {\n          if (!isLoginPage) {\n            Router.push('/login');\n          } else {\n            setLoading(false);\n          }\n        } else {\n          if (isLoginPage) {\n            Router.push('/');\n          } else {\n            setLoading(false);\n          }\n        }\n      } catch (error) {\n        Router.push('/login');\n      }\n    }\n  },\n\n  async authenticate(username, password, _setUser, setLoginError, persistLogged) {\n    const {\n      data\n    } = await Fetch.post('/authenticate', {\n      username,\n      password\n    });\n    const {\n      user,\n      auth,\n      error\n    } = data;\n    const payload = {\n      auth\n    };\n    const secretKey = '26sys323nosi188xzSXa98ZAA';\n    const encodedToken = jwt.encode(payload, secretKey);\n\n    if (!error) {\n      await _setUser(user);\n\n      if (persistLogged) {\n        Cookies.set('DICAST_AUTH_TOKEN', encodedToken, {\n          expires: 50000\n        });\n        Cookies.set('USERNAME', user.username, {\n          expires: 50000\n        }); //TODO colocar o resto das infos nos cookies\n      } else {\n        Cookies.set('DICAST_AUTH_TOKEN', encodedToken);\n        Cookies.set('USERNAME', user.username); //TODO colocar o resto das infos nos cookies\n      }\n\n      Router.push('/');\n    } else {\n      switch (error) {\n        case 'user not found':\n          setLoginError(1);\n          break;\n\n        case 'invalid password':\n          setLoginError(2);\n          break;\n\n        default:\n          setLoginError(1);\n          break;\n      }\n    }\n  },\n\n  async getUser(userId, setUser) {\n    const {\n      data\n    } = await Fetch.get(`/users?user_id=${userId}`);\n    const {\n      user\n    } = data;\n    setUser(user);\n  }\n\n};","map":{"version":3,"sources":["C:/Users/marce/Programação/Projetos/dicast/frontend/services/Api.js"],"names":["Cookies","Axios","Router","jwt","Fetch","create","baseURL","isAuthenticated","setLoading","isLoginPage","token","get","undefined","push","secretKey","auth","decode","response","headers","data","error","authenticate","username","password","_setUser","setLoginError","persistLogged","post","user","payload","encodedToken","encode","set","expires","getUser","userId","setUser"],"mappings":"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","sourcesContent":["import Cookies from 'js-cookie';\r\nimport Axios from 'axios';\r\nimport Router from 'next/router'\r\nimport jwt from 'jwt-simple';\r\n\r\nconst Fetch = Axios.create({ baseURL: 'http://localhost:3333' });\r\n\r\nexport default {\r\n    async isAuthenticated(setLoading, isLoginPage) {\r\n\r\n        const token = Cookies.get('DICAST_AUTH_TOKEN');\r\n\r\n        if (token === undefined || token === null || token === '') {\r\n            isLoginPage ? setLoading(false) : Router.push('/login');\r\n        }\r\n        else {\r\n            try {\r\n\r\n                const secretKey = '26sys323nosi188xzSXa98ZAA';\r\n                const { auth } = jwt.decode(token, secretKey);\r\n\r\n                const response = await Axios.get('http://localhost:3333/is_authenticated', {\r\n                    headers: { auth }\r\n                });\r\n\r\n                const { isAuthenticated } = response.data;\r\n\r\n                if (!isAuthenticated) {\r\n                    if (!isLoginPage) {\r\n                        Router.push('/login');\r\n                    }\r\n                    else {\r\n                        setLoading(false);\r\n                    }\r\n                }\r\n                else {\r\n                    if (isLoginPage) {\r\n                        Router.push('/');\r\n                    }\r\n                    else {\r\n                        setLoading(false);\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                Router.push('/login');\r\n            }\r\n        }\r\n    },\r\n\r\n    async authenticate(username, password, _setUser, setLoginError, persistLogged) {\r\n        const { data } = await Fetch.post('/authenticate', { username, password });\r\n\r\n        const { user, auth, error } = data;\r\n\r\n        const payload = { auth };\r\n        const secretKey = '26sys323nosi188xzSXa98ZAA';\r\n        const encodedToken = jwt.encode(payload, secretKey);\r\n\r\n        if (!error) {\r\n            await _setUser(user);\r\n\r\n            if (persistLogged) {\r\n                Cookies.set('DICAST_AUTH_TOKEN', encodedToken, { expires: 50000 });\r\n                Cookies.set('USERNAME', user.username, { expires: 50000 });\r\n                //TODO colocar o resto das infos nos cookies\r\n            }\r\n            else {\r\n                Cookies.set('DICAST_AUTH_TOKEN', encodedToken);\r\n                Cookies.set('USERNAME', user.username);\r\n                //TODO colocar o resto das infos nos cookies\r\n            }\r\n\r\n            Router.push('/');\r\n        }\r\n        else {\r\n            switch (error) {\r\n                case 'user not found': setLoginError(1);\r\n                    break;\r\n                case 'invalid password': setLoginError(2);\r\n                    break;\r\n                default: setLoginError(1);\r\n                    break;\r\n            }\r\n        }\r\n    },\r\n\r\n    async getUser(userId, setUser) {\r\n        const { data } = await Fetch.get(`/users?user_id=${userId}`);\r\n\r\n        const { user } = data;\r\n\r\n        setUser(user);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}