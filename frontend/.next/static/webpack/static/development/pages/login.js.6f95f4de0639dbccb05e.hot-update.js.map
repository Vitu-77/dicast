{"version":3,"file":"static/webpack/static\\development\\pages\\login.js.6f95f4de0639dbccb05e.hot-update.js","sources":["webpack:///./services/Api.js"],"sourcesContent":["import Cookies from 'js-cookie';\r\nimport Axios from 'axios';\r\nimport Router from 'next/router'\r\nimport jwt from 'jwt-simple';\r\n\r\nconst Fetch = Axios.create({ baseURL: 'http://localhost:3333' });\r\n\r\nexport default {\r\n    async isAuthenticated(setLoading, isLoginPage) {\r\n\r\n        const token = Cookies.get('DICAST_AUTH_TOKEN');\r\n\r\n        if (token === undefined || token === null || token === '') {\r\n            isLoginPage ? setLoading(false) : Router.push('/login');\r\n        }\r\n        else {\r\n            try {\r\n\r\n                const SECRET = '26sys323nosi188xzSXa98ZAA';\r\n                const decodedToken = jwt.decode(token, SECRET, true);\r\n\r\n                console.log({ decodedToken });\r\n\r\n                const response = await Axios.get('http://localhost:3333/is_authenticated', {\r\n                    headers: { decodedToken }\r\n                });\r\n\r\n                const { isAuthenticated } = response.data;\r\n\r\n                if (!isAuthenticated) {\r\n                    if (!isLoginPage) {\r\n                        Router.push('/login');\r\n                    }\r\n                    else {\r\n                        setLoading(false);\r\n                    }\r\n                }\r\n                else {\r\n                    if (isLoginPage) {\r\n                        Router.push('/');\r\n                    }\r\n                    else {\r\n                        setLoading(false);\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                Router.push('/login');\r\n            }\r\n        }\r\n    },\r\n\r\n    async authenticate(username, password, _setUser, setLoginError, persistLogged) {\r\n        const { data } = await Fetch.post('/authenticate', { username, password });\r\n\r\n        const { user, auth, error } = data;\r\n\r\n        const payload = { auth };\r\n        const SECRET = '26sys323nosi188xzSXa98ZAA';\r\n        const token = jwt.encode(payload, SECRET);\r\n\r\n        console.log({ token });\r\n\r\n        if (!error) {\r\n            await _setUser(user);\r\n\r\n            if (persistLogged) {\r\n                Cookies.set('DICAST_AUTH_TOKEN', token, { expires: 50000 });\r\n                Cookies.set('USERNAME', user.username, { expires: 50000 });\r\n                //TODO colocar o resto das infos nos cookies\r\n            }\r\n            else {\r\n                Cookies.set('DICAST_AUTH_TOKEN', token);\r\n                Cookies.set('USERNAME', user.username);\r\n                //TODO colocar o resto das infos nos cookies\r\n            }\r\n\r\n            // Router.push('/');\r\n        }\r\n        else {\r\n            switch (error) {\r\n                case 'user not found': setLoginError(1);\r\n                    break;\r\n                case 'invalid password': setLoginError(2);\r\n                    break;\r\n                default: setLoginError(1);\r\n                    break;\r\n            }\r\n        }\r\n    },\r\n\r\n    async getUser(userId, setUser) {\r\n        const { data } = await Fetch.get(`/users?user_id=${userId}`);\r\n\r\n        const { user } = data;\r\n\r\n        setUser(user);\r\n    }\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAGA;AACA;AAJA;AAAA;AAAA;AAAA;AACA;AAKA;AANA;AAAA;AACA;AADA;AAAA;AAWA;AACA;AAEA;AAAA;AAAA;AAdA;AAAA;AAiBA;AAAA;AAAA;AADA;AACA;AAjBA;AAgBA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAtCA;AAAA;AACA;AADA;AAAA;AAAA;AAuCA;AACA;AAxCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AA4CA;AA5CA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6CA;AAAA;AAAA;AACA;AA9CA;AAAA;AA6CA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAtDA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AA0DA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AArEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAyEA;AAzEA;AACA;AADA;AA2EA;AA3EA;AACA;AADA;AA6EA;AA7EA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAmFA;AAnFA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAoFA;AAEA;AAEA;AACA;AAzFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;;;;A","sourceRoot":""}